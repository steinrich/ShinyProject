library(MASS)
library(ISLR)
attach(Smarket)
train=(Year<2005)   #Before 2005 is all set up as training set.
Smarket.2005=Smarket[!train,]
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=train) #Fit the training set using lda. Direction is the response
lda.pred=predict(lda.fit,Smarket.2005)#Applie fit to test set: Smarket.2005
lda.class=lda.pred$class
table(lda.class,Direction.2005)
mean(lda.class==Direction.2005)
sum(lda.pred$posterior[,1]>=.5)    #Count the ones >0.5
sum(lda.pred$posterior[,1]<.5)
lda.pred$posterior[1:20,1]
sum(lda.pred$posterior[,1]>0.9)
install.packages("MASS")
install.packages("MASS")
install.packages("ISLR")
train=(Year<2005)   #Before 2005 is all set up as training set.
Smarket.2005=Smarket[!train,]
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=train) #Fit the training set using lda. Direction is the response
lda.pred=predict(lda.fit,Smarket.2005)#Applie fit to test set: Smarket.2005
lda.class=lda.pred$class
table(lda.class,Direction.2005)
mean(lda.class==Direction.2005)
sum(lda.pred$posterior[,1]>=.5)    #Count the ones >0.5
sum(lda.pred$posterior[,1]<.5)
lda.pred$posterior[1:20,1]
sum(lda.pred$posterior[,1]>0.9)
library(MASS)
library(ISLR)
attach(Smarket)
train=(Year<2005)
Smarket.2005=Smarket[!train,]
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=train) #Fit the training set using lda. Direction is the response
lda.pred=predict(lda.fit,Smarket.2005)#Applie fit to test set: Smarket.2005
lda.class=lda.pred$class
table(lda.class,Direction.2005)
mean(lda.class==Direction.2005)
sum(lda.pred$posterior[,1]>=.5)    #Count the ones >0.5
sum(lda.pred$posterior[,1]<.5)
lda.pred$posterior[1:20,1]
sum(lda.pred$posterior[,1]>0.9)
source('D:/R/R_Original/ISLR/BASIC_LOOCV.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("D:/R/R_Original/JHU_Homework/Data Product/ShinyProject")
runApp()
library(shiny)
runApp()
libray(RGtk2)
library(RGtk2)
runApp()
install.packages("RGtk2",type="source")
install.packages("RGtk2", type = "source")
library("RGtk2")
library(RGtk2)
install.packages("cairoDevice", type="source")
library(“cairoDevice)
library("cairoDevice")
source('D:/R/R_Original/JHU_Homework/Machine Learning/Prediction_Plot.R', echo=TRUE)
source('D:/R/R_Original/JHU_Homework/Machine Learning/Regression.R', echo=TRUE)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(333)
mu<-input$mu
inTrain<-createDataPartition(y=faithful$waiting,p=mu,list=FALSE)
trainFaith<-faithful[inTrain,]
testFaith<-faithful[-inTrain,]
lml<-lm(eruptions~waiting,data=trainFaith)
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue")
lines(trainFaith$waiting,predict(lml),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
lines(testFaith$waiting,predict(lml,newdata=testFaith),lwd=3)
output$RMSE_training<-sqrt(sum((lml$fitted.values-trainFaith$eruptions)^2))
output$RMSE_testing<-sqrt(sum((predict(lml,newdata=testFaith)-testFaith$eruptions)^2))
runApp()
runApp()
runApp()
runApp()
summary(lml)
library(knitr)
runApp()
source('D:/R/R_Original/JHU_Homework/Explolatory_Data_Analysis/Plot1.R', echo=TRUE)
source('D:/R/R_Original/JHU_Homework/Explolatory_Data_Analysis/Plot2.R', echo=TRUE)
getwd（）
